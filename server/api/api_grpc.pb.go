// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	SendRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AcceptRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (Server_UploadClient, error)
	ListenRequests(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Server_ListenRequestsClient, error)
	ListenPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Server_ListenPeersClient, error)
	Quit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) SendRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Server/SendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) AcceptRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Server/AcceptRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Server_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[0], "/api.Server/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverUploadClient{stream}
	return x, nil
}

type Server_UploadClient interface {
	Send(*UploadData) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type serverUploadClient struct {
	grpc.ClientStream
}

func (x *serverUploadClient) Send(m *UploadData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverUploadClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverClient) ListenRequests(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Server_ListenRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[1], "/api.Server/ListenRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverListenRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Server_ListenRequestsClient interface {
	Recv() (*Request, error)
	grpc.ClientStream
}

type serverListenRequestsClient struct {
	grpc.ClientStream
}

func (x *serverListenRequestsClient) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverClient) ListenPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Server_ListenPeersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[2], "/api.Server/ListenPeers", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverListenPeersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Server_ListenPeersClient interface {
	Recv() (*PeerUpdate, error)
	grpc.ClientStream
}

type serverListenPeersClient struct {
	grpc.ClientStream
}

func (x *serverListenPeersClient) Recv() (*PeerUpdate, error) {
	m := new(PeerUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverClient) Quit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Server/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	SendRequest(context.Context, *Request) (*Response, error)
	AcceptRequest(context.Context, *Request) (*Response, error)
	Upload(Server_UploadServer) error
	ListenRequests(*Empty, Server_ListenRequestsServer) error
	ListenPeers(*Empty, Server_ListenPeersServer) error
	Quit(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) SendRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (UnimplementedServerServer) AcceptRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRequest not implemented")
}
func (UnimplementedServerServer) Upload(Server_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedServerServer) ListenRequests(*Empty, Server_ListenRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenRequests not implemented")
}
func (UnimplementedServerServer) ListenPeers(*Empty, Server_ListenPeersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenPeers not implemented")
}
func (UnimplementedServerServer) Quit(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/SendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).SendRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_AcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).AcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/AcceptRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).AcceptRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerServer).Upload(&serverUploadServer{stream})
}

type Server_UploadServer interface {
	SendAndClose(*Empty) error
	Recv() (*UploadData, error)
	grpc.ServerStream
}

type serverUploadServer struct {
	grpc.ServerStream
}

func (x *serverUploadServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverUploadServer) Recv() (*UploadData, error) {
	m := new(UploadData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Server_ListenRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).ListenRequests(m, &serverListenRequestsServer{stream})
}

type Server_ListenRequestsServer interface {
	Send(*Request) error
	grpc.ServerStream
}

type serverListenRequestsServer struct {
	grpc.ServerStream
}

func (x *serverListenRequestsServer) Send(m *Request) error {
	return x.ServerStream.SendMsg(m)
}

func _Server_ListenPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).ListenPeers(m, &serverListenPeersServer{stream})
}

type Server_ListenPeersServer interface {
	Send(*PeerUpdate) error
	grpc.ServerStream
}

type serverListenPeersServer struct {
	grpc.ServerStream
}

func (x *serverListenPeersServer) Send(m *PeerUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Server_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Quit(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRequest",
			Handler:    _Server_SendRequest_Handler,
		},
		{
			MethodName: "AcceptRequest",
			Handler:    _Server_AcceptRequest_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _Server_Quit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Server_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListenRequests",
			Handler:       _Server_ListenRequests_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenPeers",
			Handler:       _Server_ListenPeers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
