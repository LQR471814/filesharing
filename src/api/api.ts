// @generated by protobuf-ts 2.8.3 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "api.proto" (package "api", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message api.Empty
 */
export interface Empty {
}
/**
 * @generated from protobuf message api.Peer
 */
export interface Peer {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string; // ? use ip address as id
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: api.Platform platform = 3;
     */
    platform: Platform;
}
/**
 * @generated from protobuf message api.Message
 */
export interface Message {
    /**
     * @generated from protobuf field: string peer = 1;
     */
    peer: string;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message api.Connection
 */
export interface Connection {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string peer = 2;
     */
    peer: string;
}
/**
 * @generated from protobuf message api.PeerUpdate
 */
export interface PeerUpdate {
    /**
     * @generated from protobuf field: repeated api.Peer peers = 1;
     */
    peers: Peer[];
}
/**
 * @generated from protobuf enum api.Platform
 */
export enum Platform {
    /**
     * @generated from protobuf enum value: DESKTOP = 0;
     */
    DESKTOP = 0,
    /**
     * @generated from protobuf enum value: MOBILE = 1;
     */
    MOBILE = 1,
    /**
     * @generated from protobuf enum value: OTHER = 2;
     */
    OTHER = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("api.Empty", []);
    }
}
/**
 * @generated MessageType for protobuf message api.Empty
 */
export const Empty = new Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Peer$Type extends MessageType<Peer> {
    constructor() {
        super("api.Peer", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "platform", kind: "enum", T: () => ["api.Platform", Platform] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message api.Peer
 */
export const Peer = new Peer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("api.Message", [
            { no: 1, name: "peer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message api.Message
 */
export const Message = new Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Connection$Type extends MessageType<Connection> {
    constructor() {
        super("api.Connection", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "peer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message api.Connection
 */
export const Connection = new Connection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerUpdate$Type extends MessageType<PeerUpdate> {
    constructor() {
        super("api.PeerUpdate", [
            { no: 1, name: "peers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Peer }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message api.PeerUpdate
 */
export const PeerUpdate = new PeerUpdate$Type();
/**
 * @generated ServiceType for protobuf service api.API
 */
export const API = new ServiceType("api.API", [
    { name: "SendMessage", options: {}, I: Message, O: Empty },
    { name: "ListenMessages", serverStreaming: true, options: {}, I: Empty, O: Message },
    { name: "ListenConnections", serverStreaming: true, options: {}, I: Empty, O: Connection },
    { name: "Join", serverStreaming: true, options: {}, I: Peer, O: PeerUpdate }
]);
